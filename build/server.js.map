{"version":3,"sources":["server.ts"],"names":[],"mappings":";;AAAA,mCAAkC;AAClC,mCAAkC;AAClC,qCAAoC;AACpC,iCAAgC;AAChC,6BAA4B;AAC5B,6CAA8C;AAE9C,0CAAyC;AACzC,kDAAiD;AACjD,MAAM,IAAI,GAAW,IAAI,CAAA;AAEzB,MAAa,MAAM;IAIjB;QACE,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAA;QAGpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YAChB,oBAAoB,EAAE,GAAG;SAC1B,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wBAAU,CAAC;YACtB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAA;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;QAEhC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACpD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;gBACzB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,4CAA4C,EAAE,IAAI,CAAC,CAAA;YACzE,CAAC,CAAC,CAAA;YACF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,CAAA;IACjB,CAAC;CACF;AAhCD,wBAgCC;AACD,IAAI,MAAM,EAAE,CAAA","file":"server.js","sourcesContent":["import * as express from 'express'\nimport * as winston from 'winston'\nimport * as boom from 'express-boom'\nimport * as morgan from 'morgan'\nimport * as cors from 'cors'\nimport { json, urlencoded } from 'body-parser'\nimport { Express } from 'express'\nimport * as routes from './routes/_index'\nimport * as sequelize from './sqlz/models/_index'\nconst PORT: number = 3000\n\nexport class Server {\n\n  private app: Express\n\n  constructor() {\n    this.app = express()\n\n    // Express middleware\n    this.app.use(cors({\n      optionsSuccessStatus: 200\n    }))\n    this.app.use(urlencoded({\n      extended: true\n    }))\n    this.app.use(json())\n    this.app.use(boom())\n    this.app.use(morgan('combined'))\n\n    sequelize.default.sync({ force: true }).then(result => {\n      console.log(result);\n      this.app.listen(PORT, () => {\n        winston.log('info', '--> Server successfully started at port %d', PORT)\n      })\n      routes.initRoutes(this.app)\n  }).catch(err => {\n      console.log(err);\n  });\n  }\n\n  getApp() {\n    return this.app\n  }\n}\nnew Server()\n"],"sourceRoot":"../src"}